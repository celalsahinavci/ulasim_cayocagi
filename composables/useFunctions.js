// composables/useFunctions.js
import { ref, computed } from 'vue'
import { useSupabaseClient } from '#imports'

export const useFunctions = () => {
  const supabase = useSupabaseClient()

  const products = ref([]) // √úr√ºnler
  const productOptions = ref([]) // T√ºm √ºr√ºn se√ßenekleri (priorities)
  const currentOrder = ref([]) // Sipari≈ü edilen √ºr√ºnler
  const orders = ref([]) // Onaylanan sipari≈üler

  const optionsCache = new Map()

  // üìå √úr√ºnleri Supabase'den √ßek
  const fetchProducts = async () => {
    const { data, error } = await supabase.from('products').select('*')
    if (error) {
      console.error('√úr√ºnler alƒ±nƒ±rken hata:', error.message)
      alert('√úr√ºnler alƒ±nƒ±rken hata olu≈ütu. L√ºtfen tekrar deneyin.')
    } else {
      products.value = data
    }
  }

  // üìå T√ºm √ºr√ºn se√ßeneklerini (priorities) √ßek
  const fetchProductOptions = async () => {
    const { data, error } = await supabase.from('product_options').select('*')
    if (error) {
      console.error('√úr√ºn se√ßenekleri alƒ±nƒ±rken hata:', error.message)
      alert('√úr√ºn se√ßenekleri alƒ±nƒ±rken hata olu≈ütu. L√ºtfen tekrar deneyin.')
    } else {
      productOptions.value = data
    }
  }

  // üìå Se√ßilen √ºr√ºne g√∂re filtreleme yap
  const getFilteredOptions = (productId) => {
    if (optionsCache.has(productId)) {
      // Eƒüer cache'de varsa, doƒürudan d√∂nd√ºr√ºyoruz
      return optionsCache.get(productId)
    } else {
      // Cache'de yoksa, filtreyi uygulayƒ±p cache'e ekliyoruz
      const filteredOptions = productOptions.value.filter(option => option.product_id === productId)
      optionsCache.set(productId, filteredOptions)
      return filteredOptions
    }
  }

  // üìå √úr√ºn se√ßildiƒüinde sipari≈ü listesine ekle
  const handleProductClick = (product, toggle) => {
    currentOrder.value.push({
      product,
      count: 1,
      priority: null, // Se√ßenekler i√ßin bo≈ü ba≈ülangƒ±√ß
    })
    toggle && toggle()
  }

  // üìå Sipari≈üten √ßƒ±kar
  const cancelOrder = (item) => {
    currentOrder.value = currentOrder.value.filter(i => i !== item)
  }

  const countErrorMessage = computed(() => {
    return currentOrder.value.some(item => item.count < 1) ? 'Adet en az 1 olmalƒ±!' : ''
  })

  // üìå Sipari≈üi onayla
  const applyAllOrders = () => {
    if (currentOrder.value.length === 0) {
      alert('Sipari≈ü listeniz bo≈ü. L√ºtfen en az bir √ºr√ºn ekleyin.')
      return
    }

    currentOrder.value.forEach(item => {
      if (!item.product || !item.priority || item.count < 1) {
        alert('Eksik veya hatalƒ± veri var. L√ºtfen t√ºm bilgileri doldurduƒüunuzdan emin olun.')
        return
      }

      const newOrder = {
        id: Date.now() + Math.random(), // Benzersiz ID
        product: item.product,
        time: new Date().toLocaleTimeString(),
        status: 'Uygulandƒ±',
        count: item.count,
        priority: item.priority,
      }
      orders.value.push(newOrder)
    })
    currentOrder.value = []
  }

  const deleteProduct = async (productId) => {
    const { error } = await supabase.from('products').delete().eq('id', productId)
    if (error) {
      console.error('√úr√ºn silinirken hata:', error.message)
      alert('√úr√ºn silinemedi. L√ºtfen tekrar deneyin.')
    } else {
      products.value = products.value.filter(p => p.id !== productId) // Listeyi g√ºncelle
    }
  }
  const updateProduct = async (productId, updatedData) => {
    const { error } = await supabase
      .from('products')
      .update(updatedData)
      .eq('id', productId)
  
    if (error) {
      console.error('√úr√ºn g√ºncellenirken hata:', error.message)
      alert('√úr√ºn g√ºncellenemedi. L√ºtfen tekrar deneyin.')
    } else {
      const index = products.value.findIndex(p => p.id === productId)
      if (index !== -1) {
        products.value[index] = { ...products.value[index], ...updatedData } // Vue listesini g√ºncelle
      }
    }
  }
  

  return {
    products,
    productOptions,
    currentOrder,
    orders,
    fetchProducts,
    fetchProductOptions,
    getFilteredOptions,
    handleProductClick,
    cancelOrder,
    countErrorMessage,
    applyAllOrders,
    deleteProduct,
    updateProduct
  }
}
