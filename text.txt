-- 1. Yetki Seviyeleri Tablosu
CREATE TABLE roles (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT
);

-- 3. Kullanıcılar Tablosu (Supabase Auth ID'yi referans alıyor)
CREATE TABLE users (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    isim TEXT,
    role_id INTEGER REFERENCES roles(id) DEFAULT 3,
    bakiye DECIMAL DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- 4. Ürünler Tablosu
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    price DECIMAL NOT NULL,
    photo TEXT -- Fotoğraf dosya yolu
);

-- 5. Ürün Seçenekleri Tablosu
CREATE TABLE product_options (
    id SERIAL PRIMARY KEY,
    product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
    name TEXT NOT NULL, -- Seçenek adı (örn: Küçük, Orta, Büyük)
    extra_price DECIMAL DEFAULT 0 -- Ekstra fiyat
);

-- 6. Siparişler Tablosu
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    status TEXT CHECK (status IN ('beklemede', 'onaylandı', 'reddedildi')) DEFAULT 'beklemede',
    price DECIMAL NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

-- 7. Sipariş İçerik Tablosu
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
    product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    price DECIMAL NOT NULL, -- Sipariş sırasında belirlenen fiyat
    option_id INTEGER REFERENCES product_options(id) ON DELETE SET NULL
);

















INSERT INTO roles (name, description) 
VALUES 
    ('admin', 'Yönetici rolü'),
    ('personel', 'Personel rolü'),
    ('kullanıcı', 'Standart kullanıcı rolü');















create or replace function public.create_user_profile()
returns trigger as $$
begin
  insert into public.users (id, isim, created_at, updated_at)
  values (new.id, COALESCE(NULLIF(new.raw_user_meta_data->>'full_name', ''), NULL), now(), now());
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
after insert on auth.users
for each row execute function public.create_user_profile();
